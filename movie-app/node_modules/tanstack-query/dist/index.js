"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useQueryBuilder = exports.useMutationBuilder = void 0;
const vue_query_1 = require("@tanstack/vue-query");
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
/**
 * A utility function to prefix keys of the returned object from useMutation.
 * @param prefix - The prefix to prepend to each key.
 * @param mutationOptions - The options for useMutation.
 * @param keysToInvalidate - An array of keys to invalidate queries for after mutation.
 * @returns A function that accepts mutation options and returns the prefixed keys object.
 */
function useMutationBuilder({ prefix, mutationOptions, keysToInvalidate, }) {
    const queryClient = (0, vue_query_1.useQueryClient)();
    /**
     * Function to invalidate queries based on keysToInvalidate.
     */
    function invalidate() {
        keysToInvalidate === null || keysToInvalidate === void 0 ? void 0 : keysToInvalidate.forEach((key) => {
            queryClient.invalidateQueries({ queryKey: [key], exact: false });
        });
    }
    return (_options) => {
        const mergedOptions = Object.assign(Object.assign(Object.assign({}, mutationOptions), _options), { onSuccess(data, variables, context) {
                if (_options === null || _options === void 0 ? void 0 : _options.onSuccess)
                    _options === null || _options === void 0 ? void 0 : _options.onSuccess(data, variables, context);
                if (mutationOptions === null || mutationOptions === void 0 ? void 0 : mutationOptions.onSuccess)
                    mutationOptions === null || mutationOptions === void 0 ? void 0 : mutationOptions.onSuccess(data, variables, context);
                invalidate();
            } });
        // Invoke useMutation with merged options
        const result = (0, vue_query_1.useMutation)(mergedOptions);
        // Prefix keys of the returned object
        const prefixedResult = {};
        for (const [key, value] of Object.entries(result)) {
            prefixedResult[`${prefix}${capitalizeFirstLetter(key)}`] = value;
        }
        return prefixedResult;
    };
}
exports.useMutationBuilder = useMutationBuilder;
/**
 * A utility function to prefix keys of the returned object from useQuery.
 * @param prefix - The prefix to prepend to each key.
 * @param defaultOptions - The default options for useQuery.
 * @returns A function that accepts developer options and returns the prefixed keys object.
 */
function useQueryBuilder({ prefix, defaultOptions, }) {
    return (_developerOptions) => {
        // @ts-ignore, queryKey in _developerOptions and defaultOptions
        // but ts will not know that because queryKey exist at runtime
        const queryKey = (_developerOptions === null || _developerOptions === void 0 ? void 0 : _developerOptions.queryKey) || defaultOptions.queryKey;
        // Merge default options and developer options
        const mergedOptions = Object.assign({}, defaultOptions, _developerOptions, { queryKey });
        // Invoke useQuery with merged options
        const result = (0, vue_query_1.useQuery)(mergedOptions);
        // Prefix keys of the returned object
        const prefixedResult = {};
        for (const [key, value] of Object.entries(result)) {
            prefixedResult[`${prefix}${capitalizeFirstLetter(key)}`] = value;
        }
        return prefixedResult;
    };
}
exports.useQueryBuilder = useQueryBuilder;
