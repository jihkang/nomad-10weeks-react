import { QueryKey, UseQueryReturnType, UseQueryOptions, type UseMutationReturnType } from "@tanstack/vue-query";
import type { DefaultError, MutationObserverOptions } from "@tanstack/query-core";
type BuilderReturn<Type, TName extends string> = {
    [Property in keyof Type as `${TName}${Capitalize<string & Property>}`]: Type[Property];
};
/**
 * A utility function to prefix keys of the returned object from useMutation.
 * @param prefix - The prefix to prepend to each key.
 * @param mutationOptions - The options for useMutation.
 * @param keysToInvalidate - An array of keys to invalidate queries for after mutation.
 * @returns A function that accepts mutation options and returns the prefixed keys object.
 */
export declare function useMutationBuilder<TName extends string, TData = unknown, TError = DefaultError, TVariables = void, TContext = unknown>({ prefix, mutationOptions, keysToInvalidate, }: {
    prefix: TName;
    mutationOptions: MutationObserverOptions<TData, TError, TVariables, TContext>;
    keysToInvalidate?: string[];
}): (_options?: MutationObserverOptions<TData, TError, TVariables, TContext>) => BuilderReturn<UseMutationReturnType<TData, TError, TVariables, TContext>, TName>;
/**
 * A utility function to prefix keys of the returned object from useQuery.
 * @param prefix - The prefix to prepend to each key.
 * @param defaultOptions - The default options for useQuery.
 * @returns A function that accepts developer options and returns the prefixed keys object.
 */
export declare function useQueryBuilder<TName extends string, TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>({ prefix, defaultOptions, }: {
    prefix: TName;
    defaultOptions: UseQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>;
}): (_developerOptions?: Partial<UseQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>>) => BuilderReturn<UseQueryReturnType<TData, TError>, TName>;
export {};
